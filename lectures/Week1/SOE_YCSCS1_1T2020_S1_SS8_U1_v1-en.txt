Hello again. In this video we're gonna wrap up our overview of cool with one more
example of writing a cool program. For our final example, let's look at a program
that actually manipulates some interesting data structure. So we'll begin here by
opening up a file. And let's call our program list dot CL this time. And as
usual, I will begin by writing our main routine, and our main method. And once
again let's, let's make this inherit from I/O so we can do the I/O routines here.
And let's just begin with something very simple, as always. Let's just have
something that prints out "Hello World" but in a little bit of an unusual way.
Let's, we're going to end up writing a list, a list abstraction. And let's first
build a list by hand, or at least build the elements of a list by hand, and then
we'll actually build the list abstraction and put them in a list. So, let's have
some strings. So we will have our string hello, and this will also illustrate how
you do multiple LET bindings simultaneously. I shouldn't say
simultaneously. How you do multiple LET bindings in one LET expression. So you do
them by just listing them, and notice that this uses commas as a separator rather
than semicolons as a terminator. So this left binding is going to define three
names. Hello, world, and new line, all of which are strings. And then We're going to
now print these out on the screen, so we are going to want to be able to do out
string, and since main inherits from self, we can do that without an object there,
because it just, again, dispatches to the self object. And we want to concatenate
these strings together in the right order. So we'll do hello dot, and since hello is
a string, it can be concatenated to world, and world is a string, so it can be
concatenated to newline And that should do the job. And just like probably one more
thing about this lead this, these lead bindings here. This notice if it, the
comma is, the comma is the separator here, meaning it doesn't come after the last one
on the list. So it just separates that into the list, so it's not a terminator.
And now we can close up our main procedure. Close up our class definition.
Save it and now see if it compiles. Oh amazing! First try. And we run it, and it
prints hello world, as expected. So now, let's, instead of introducing the three
strings separately, and then concatenating them together, let's write an abstraction
where we can build a list of strings. And then that abstraction will have a function
within it to do the, to do the concatenation. Alright, so we'll have a
class called list. And, every list needs to, I think, to have two components. So
first, it's gonna have the item that's in the list, and that'll be a string. And
then when you have a pointer to the next, to the, to the tail of the list, to the
rest of the list. And so I have a next, field that, points or is another list, is
another list of strings. Now we need a couple of methods in order to, in order to
use this list. We'll need to be able to initialize a list in some way. So the
initialization function will take an item and, the rest of the list, the next part
of the list. And, what is it going to do? Well it's gonna need to set the fields of
the object, And so this one has to be done as a series of assignment statements. So
we'll need a statement block and we will set the item to be the I argument. We'll
set the next, attribute to be the N argument. And now, we actually want, this
initialized object here, this, this method here, to return the object itself. So
that, and that'll be convenient for chained together calls to [inaudible]. So
we'll have it return self. It'll return the self object. And that's the end of out
statement block. And then that is the end of our method. And, I made a mistake up
here. We've gotta declare the return type of a knit. And what it's going to return
of course, it returns a, a object of type list. I'll need to put a list declaration
there. Alright, so that takes care of, of a knit . And now we can use this to build,
build a list down here. So what should we do? Let's actually have a new variable
called list. That we'll introduce here in this lead, this series of lead bindings.
And let's just build a list out of these three objects. So we'll say, we'll have a
new list, and then we'll initialize to contain the string hello. And. What should
the, rest of the list be? Well that should be another list, which is initialized to
have the string the world. And what should be inside of that list file, is another
new list object, which we'll initialize to have new line. And now what do we put
here, actually there's a little bit of problem here isn't there? We need to put a
list object here. But we don't want to allocate a, a new list object, we want
that to be really the equivalent of a, of a null pointer. And there's no name for
that in Cool actually, you can't write down the name of a null pointer. It's
called void in Cool. There's no, there's no, no special symbol for that. So we'll
have to create a variable that is just not initialized. And that will be, as well,
uninitialized variable of type list will, in fact be void. It'll be a null pointer.
So let's call that nil. And it'll be a typed list, and no initializer. And so nil
there will point to nothing or the, the void point. And then we can use nil to
terminate our list here. And then we have to close off all the params for all the
nesting here. And I think that's it. And so that will be our list. Okay, so we have
a list of three strings. And now what we want to do with that is to print it out.
And so what we would like to do is to have a list fall off the list, and then a
function that's gonna flatten that list and we'll just print it. So that is the
what the, what the main program should do. And now. You have to write the flatten
function. So flatten takes no arguments. And it's going to return a string. It's
going to return a single string. And flatten is a pretty simple function. U h,
what do we have to do. Well. There's really two cases. One is if we're at the
end of the string, and the other is if we're not yet at the end of the string. So
let's, test for that. So how do we know if we're at the end of the string? Well, if
the next pointer is, is void, then there is no, nothing more in the string. And
there actually is a special test for that in Cool. It's called the isvoid, function,
and it's written like this. So if isvoid, of next, okay? So [inaudible] next field.
So if the next field is void, then what are we going to return? Keeps. Well then
the result here is just, the item, whatever the item was in this last element
of the list. And otherwise What we want to do, Well, otherwise, we want to take the
item and we want to concatenate onto it, the result of flattening the rest of the
list. And that is our flattened method. So let's see if that works. So let's compile
this. And we got a couple of syntax errors here. So let's go back and see what's
going on. So we have a syntax error here, at the end of the, the flatten method. And
we see that we left out the [inaudible] to close a conditional. So a conditional has
to be ended with, with [inaudible]. Alright, and let's see if that's working
now. And we still have a syntax error, at line 29. And the mistake here is that we
forgot to declare the type of this variable, which is a list. And then it
gets initialized to this to this big expression that we wrote out. Lemme just
do the indentation a little more nicely here. And notice, something actually is
worth mentioning here that this definition here, this definition of the variable
list. Depends on the definition of the previous variables in the let. So, each of
so when a let binding is made the name of the variable that's bound is actually
available in subsequent let expressions. So in this case this variable list makes
use of all of hello, world, and newline, Which we're defining earlier in the same
lead constr uct. Let's save this, and come over here and compile it. And we see we
got another bug in the code. So, we come up here. We see we I've made a mistake
here. I've used functional notation here calling flattened of next and what I
actually wanted to do was to dispatch to next on the method flattened. So, that
should be written like that. All right, Probably getting close now. Let's see if
it works yet. Well it compiles and now let's see if it runs. And indeed it does,
Prints out, hello world, Just as we expected. Now let's go back to our program
and let's generalize this list abstraction in one way. Let's say that we can have an
arbitrary list of objects, not just strings. And that will require us to
change a few things so it can be initialized now with an object. And now
when it comes time to flatten this list we want to reduce a string. We want to
present produce a print representation. But not everything in the, in the list, is
necessarily a string. And we need a way to traverse the list and do different things,
for different kinds of things that might be in the list for different types of
things that might be in the list. And so there's a constructing cool for the type
of, and, of an object, at run time and this is called, the case construct. So,
let me first introduce a let expression here, we'll let the string that we're
gonna construct, Which is of type string. And that's going to be initialized to
something, and now, it's going to be a case. And what do we put a case on? Well,
it's going to depend on the kind of thing the item is. So the item in the list could
be, it could be different kinds of types and we want to do a different operation
depending on what item actually is. So the case item and then the key word is of, and
now we have different branches of the case expression for different kinds of things,
that could be in the list. So let's say that if it's an [inaudible]. Okay, so what
this does, is this says that if the item is an INT, then we're going to rename it
to I, we're going to bind I to that integer and then we can do something with
I. And what would we want to do with I? Well, we'd probably want to convert it to
a string. So we'll do I to A "I" And what if in fact. That item happened to be of
type string. The items in the list have to be of type string. Well, then we can just
use the item itself, as the string representation. And we can do this for
other kinds of types. If we had other kinds of types in our system, we could
continue to list out other, cases here, and how to convert them into a string
representation. But let's just have a default case here. We'll say if it's any
other kind of type, which would, which would be covered by having, a branch
saying that if it's, of, type object, we'll call it O, then we should just
abort. And so we should just call the abort function and quit. And that's our
case. It needs to be terminated with a closing keyword called esag, Again the
reverse of, of case. And now we can use that [inaudible] we constructed in our
little function here. So if, if the next field is void then we're just gonna return
the string. Otherwise we're gonna return this string incatenated with the
flattening out of the rest of the list. Kay. Now there's a couple of things we
have to fix up. We used the I to A method here, which means that list needs to
inherit. From the, conversion class A to I. And there's another issue here, I see.
And that's right here. So, if you notice The, the. The case statement needs to
produce a string. Okay, and it turns out that abort dose not return a string, abort
actually terminates the program, but it's type is that it returns an object. And so
here we have to convince the type checker, to convince, to accept this, piece of
code, and we need to get this branch here to type as a string. So what we can do,
and this is ugly, but it's the way to do it, is we put it in a block, in a
statement block. We call abort first, and a gain, that will just terminate the
program. And now we can put any string expression we want after that, and that'll
be the, that'll give a type string to the entire block. So we can just put the empty
string here, for example, and that has to be terminated with a semicolon, since this
isn't a block. And we can close, that, with a curly brace. Okay? So this is just
something we have to do, to make the type checker happy. And that may be everything
we needed to do. So let's try compiling this. And we have to include the diversion
library. And we have one syntax error. So far. And that's because we forgot to put
the, semicolon terminator on, on each of our, each of the, each of the, variables
that we were introducing in the let. Okay, got to save that. Let's try this again.
And, oops, I didn't actually manage to fix the syntax error. And that's because I put
the semicolon in the wrong place. Actually, I, I forgot. Variables that are
bond in a lent are separated by, by commas. But, the branches of the case have
to be terminated by semicolons. So, what I said before was incorrect about using
semicolons to terminate lent bindings. It's just in case branches where we need
it, In this example. Alright, anyway coming back to this let's see if it
compiles. And it does. And now let's run it, And it works. Now of course we haven't
actually exploited the ability to have different types of objects in the list. So
let's, let's do that. Let's add an integer in here. Type ints and let's, give it a
number 42. And we can insert it in here. And now we can pass any object, to a knit
in the first position. So we'll just put in 42 right there. And when we compile and
run this it just print hello world 42. If we, if everything goes as expected, And it
does, And that concludes our little tour of [inaudible]. There are a few features
that we haven't shown in these examples, but you can look in the examples
directory, for lots more programs - many more pro grams that will show you all the
different ins and outs and details of the other language features as well as the
ones we've covered here.