In this video we're going to talk about ambiguous context free grammars in
programming languages and what to do about them. We'll begin by looking at our
favorite grammar for expressions over + and * identifiers and we'll just look
at the string id * id + id. Now it turns out that this particular string and let's
write it down one more time, id * id + id. This string has two parse tree using this
grammar. Let's do the Parse tree on the left first. We begin with the start symbol
e and the first production in this derivation that gives us this Parse tree
must be that e goes to e + e. E + e. And then we replace the left most e by e * e.
We use the production e goes to e * e and we still have the plus e left over and at
this point you can see that we're going to get this parse tree. We've done with those
two productions. We have done this much of the construction of the parse tree and the
rest of productions are just generating these id's. So that's a three more
productions and we can see that, you know if we do those we'll get id * id + id no
problem, alright. So now let's switch and do the derivation on the right or excuse
me, the parse tree on the right so this begins also with e. But this time we use
the production e goes to e * e first, all right? And now we're gonna replace the
right most e. By e goes to e + e so we have e * e + e and now we've, with those
two productions we've done this portion of the parse tree and once again with three
more productions we can get to id * id + id so there you can see we've got two
derivations. That produced two distinct Parse trees. And just to be completely
clear about this, in this case we're getting two different Parse trees. Each of
these derivation, each of these Parse trees has many derivations. Each Parse
tree has a left most derivation, a right most derivation, and many other
derivations. This situation is something different. Here we have two derivations
that yield completely different Parse trees and that is the sign or the
definition of an ambiguous grammar. So a grammar is ambiguous if it has more than
one Parse tree for some string. And another way of saying the same thing is
that there is more than one right most or left most derivation for some string. So
if some string has two right most derivations or more or two left
derivations or more then the, that string will have two distinct parse trees and
that grammar will be ambiguous. Ambiguity is bad. If you have multiple parse trees
for some program then that essentially means that you're leaving it up to the
compiler to pick which of those two possible interpretations of the program
you want it to generate code for and that's not a good idea. We don't like to
have ambiguity in our programming languages and leave decisions about what
the program means up to the compiler.